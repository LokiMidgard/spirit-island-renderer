# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set Version
        run: |
            git fetch --tags --force

         
      - name: Set Version
        run: |
          v=`echo "${{ github.ref }}" | rev | cut -d"/" -f1  | rev`
          v2=`echo "${{ github.ref }}" | rev | cut -d"v" -f1  | rev`
          echo "GIT_Verion=$v" >> $GITHUB_ENV
          echo "GIT_Verion2=$v2" >> $GITHUB_ENV

      - name: Set env
        run: |
          echo "$(git tag -l --format='%(contents)' ${{ env.GIT_Verion }})" >> changes.md
         
      - name: Use Node.js 14.x
        uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - name: npm ci
        run: npm ci

      - name: npm pack
        run: npm pack

      - name: Create a Release
        uses: actions/create-release@v1.1.4
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          # The name of the tag. This should come from the webhook payload, `github.GITHUB_REF` when a user pushes a new tag
          tag_name: ${{ github.ref }}
          # The name of the release. For example, `Release v1.0.1`
          release_name: Release ${{ github.ref }}
          # Path to file with information about the tag.
          body_path: changes.md # optional
          # `true` to create a draft (unpublished) release, `false` to create a published one. Default: `false`
          # draft: # optional
          # `true` to identify the release as a prerelease. `false` to identify the release as a full release. Default: `false`
          # prerelease: # optional
          # Any branch or commit SHA the Git tag is created from, unused if the Git tag already exists. Default: SHA of current commit
          # commitish: # optional
          # Owner of the repository if it is not the current one
          # owner: # optional
          # Repository on which to release.  Used only if you want to create the release on another repo
          # repo: # optional
        
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./spirit-island-renderer-${{ env.GIT_Verion2 }}.tgz
          asset_name: spirit-island-renderer-${{ env.GIT_Verion2 }}.tgz
          asset_content_type: application/x-compressed
